service: aws-customers-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    CUSTOMERS_TABLE: 'CUSTOMERS-${opt:stage, self:provider.stage}'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMERS_TABLE}'

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      domain:
        sources:
          - table: CUSTOMERS
            sources: [./offline/migrations/customers-seed.json]

functions:
  listCustomers:
    handler: handler.listCustomers
    events:
      - http:
          path: customers
          method: get

  getCustomerById:
    handler: handler.getCustomerById
    events:
      - http:
          path: customers/{id}
          method: get

  saveCustomer:
    handler: handler.saveCustomer
    events:
      - http:
          path: customers
          method: post

  updateCustomer:
    handler: handler.updateCustomer
    events:
      - http:
          path: customers/{id}
          method: put

  deleteCustomer:
    handler: handler.deleteCustomer
    events:
      - http:
          path: customers/{id}
          method: delete

resources:
  Resources:
    CustomersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CUSTOMERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

